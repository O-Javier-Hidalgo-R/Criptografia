/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package bo.uagrm.ficct.cripto.proyecto1.presentacion;

import bo.uagrm.ficct.cripto.proyecto1.IProyecto1;
import bo.uagrm.ficct.cripto.proyecto1.implementacion.MaquinaCripto;
import java.awt.HeadlessException;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author OJavierHR
 */
public class FMaquinaCripto extends javax.swing.JFrame {

    private IProyecto1 maquinaCripto;
    int[][] tHP;
    int[][] tHS;

    /**
     * Creates new form FMaquinaCripto
     */
    public FMaquinaCripto() {
        initComponents();
        maquinaCripto = new MaquinaCripto(
                MaquinaCripto.ALFABETO_ESPAÑOL);
        mostrarAlfabeto();
        generarTablas();
        mostrarTabla1();
        mostrarTabla2();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        textMensaje = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        seleccion = new javax.swing.JComboBox<>();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jCheckBox1 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Proyecto 1");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(0, 0, 0));
        setResizable(false);

        jLabel2.setFont(new java.awt.Font("Eras Bold ITC", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 0, 0));
        jLabel2.setText("MAQUINA CRIPTOGRAFICA");

        jLabel3.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("Alfabeto:");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel4.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("Resultado:");

        textMensaje.setEditable(false);

        jButton1.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        jButton1.setText("Insertar alfabeto");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        jButton2.setText("Español");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        jButton3.setText("Ingles");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        jButton4.setText("Hiragana");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 102, 102));
        jLabel6.setText("Tipo de encriptado:");

        seleccion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Desplazamiento puro", "Desplazamiento puro con clave", "Transposicion de grupos", "Transposicion de series", "Transposicion de filas", "Transposicion de columnas", "Transposicion en zig zag", "Sustitucion por decimacion pura", "Sustitucion por decimacion Afin", "Sustitucion polialfabetica", "Sustitucion de primer orden", "Sustitucion de orden mayor", "Polialfabeticos periodicos", " " }));

        jButton5.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        jButton5.setText("Encriptar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        jButton6.setText("Desencriptar");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("Tabla de homofonos (primer grado)");

        jLabel7.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setText("Tabla de homofonos (segundo grado)");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(jTable2);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(jTable1);

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Quitar mayusculas y espacios:");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textMensaje)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(seleccion, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBox1)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton6)
                    .addComponent(seleccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        maquinaCripto = new MaquinaCripto(JOptionPane.showInputDialog(this, "Introducir alfabeto").toCharArray());
        mostrarAlfabeto();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        maquinaCripto = new MaquinaCripto(MaquinaCripto.ALFABETO_ESPAÑOL);
        mostrarAlfabeto();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        maquinaCripto = new MaquinaCripto(MaquinaCripto.ALFABETO_INGLES);
        mostrarAlfabeto();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        maquinaCripto = new MaquinaCripto(MaquinaCripto.ALFABETO_JAPONES);
        mostrarAlfabeto();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        String s = seleccion.getSelectedItem().toString();
        String mensaje = JOptionPane.showInputDialog(this, "Mesaje claro: ");
        if(jCheckBox1.isSelected()){
            mensaje = cambiarMinusculasYQuitarEspacios(mensaje);
        }
        try {
            switch (s) {
            case "Desplazamiento puro": {
                textMensaje.setText(maquinaCripto.encriptadoSustitucionDesplazamientoGenerico(mensaje,
                                Integer.parseInt(JOptionPane.
                                        showInputDialog(
                                                this, "desplazamiento:")),
                                1, ""));
            }
            break;
            case "Desplazamiento puro con clave": {
                textMensaje.setText(maquinaCripto.encriptadoSustitucionDesplazamientoGenerico(mensaje,
                                Integer.parseInt(JOptionPane.
                                        showInputDialog(
                                                this, "desplazamiento:")),
                                1, JOptionPane.
                                        showInputDialog(
                                                this, "Clave:")));
            }
            break;
            case "Transposicion de grupos": {
                textMensaje.setText(
                        maquinaCripto.encriptadoTransposicionGrupos(
                                mensaje, JOptionPane.showInputDialog(
                                                this, "Clave:")));
            }
            break;
            case "Transposicion de series": {
                textMensaje.setText(
                        maquinaCripto.encriptadoTransposicionSeries(mensaje));
            }
            break;
            case "Transposicion de filas": {
                textMensaje.setText(
                        maquinaCripto.encriptadoTransposicionFilas(
                                mensaje, JOptionPane.showInputDialog(
                                                this, "Clave:")));
            }
            break;
            case "Transposicion de columnas": {
                textMensaje.setText(
                        maquinaCripto.encriptadoTransposicionColumnas(
                                mensaje, JOptionPane.showInputDialog(
                                                this, "Clave:")));
            }
            break;
            case "Transposicion en zig zag": {
                textMensaje.setText(
                        maquinaCripto.encriptadoTransposicionZigZag(
                                mensaje, Integer.parseInt(
                                        JOptionPane.showInputDialog(
                                                this, "Clave:"))));
            }
            break;
            case "Sustitucion por decimacion pura": {
                textMensaje.setText(maquinaCripto.encriptadoSustitucionDesplazamientoGenerico(mensaje, 0,
                                Integer.parseInt(JOptionPane.
                                        showInputDialog(this, "decimacion:")), 
                                ""));
            }
            break;
            case "Sustitucion por decimacion Afin": {
                textMensaje.setText(
                        maquinaCripto.encriptadoSustitucionDesplazamientoGenerico(mensaje, 
                                Integer.parseInt(
                                        JOptionPane.showInputDialog(
                                                this, "desplazamiento:")),
                                Integer.parseInt(
                                        JOptionPane.showInputDialog(
                                                this, "decimacion:")),""));
            }
            break;
            case "Sustitucion polialfabetica": {
                 textMensaje.setText(maquinaCripto.
                         encriptadoSustitucionPoliAlfabetica(
                                 mensaje));
            }
            break;
            case "Sustitucion de primer orden": {
                textMensaje.setText(maquinaCripto.
                         encriptadoSustitucionHomofonosPrimerOrden(mensaje, 
                                 tHP));
            }
            break;
            case "Sustitucion de orden mayor": {
                boolean b = Boolean.parseBoolean(JOptionPane.showInputDialog(this,
                        "Desea usar las filas como guia para la clave "
                                + "correcta? (True/False)"));
                textMensaje.setText(maquinaCripto.
                         encriptadoSustitucionHomofonosOrdenMayor(tHS, 
                                 mensaje, 
                                 JOptionPane.showInputDialog(
                                         this, "Mensaja falso"), 
                                 b));
            }
            break;
            case "Polialfabeticos periodicos":{
                textMensaje.setText(maquinaCripto.encriptadoSustitucionPolialfabeticosPeriodicos(mensaje,
                        JOptionPane.showInputDialog(this, "Clave:")));
            }
            break;
        }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        String s = seleccion.getSelectedItem().toString();
        String mensaje = JOptionPane.showInputDialog(this, "Mesaje "
                + "encriptado: ");
        if(jCheckBox1.isSelected()){
            mensaje = cambiarMinusculasYQuitarEspacios(mensaje);
        }
        try {
        switch (s) {
            case "Desplazamiento puro": {
                textMensaje.setText(maquinaCripto.desencriptadoSustitucionDesplazamientoGenerico(mensaje,
                                Integer.parseInt(JOptionPane.
                                        showInputDialog(
                                                this, "desplazamiento:")),
                                1, ""));
            }
            break;
            case "Desplazamiento puro con clave": {
                textMensaje.setText(maquinaCripto.desencriptadoSustitucionDesplazamientoGenerico(mensaje,
                                Integer.parseInt(JOptionPane.
                                        showInputDialog(
                                                this, "desplazamiento:")),
                                1, JOptionPane.
                                        showInputDialog(
                                                this, "Clave:")));
            }
            break;
            case "Transposicion de grupos": {
                textMensaje.setText(
                        maquinaCripto.desencriptadoTransposicionGrupos(
                                mensaje, JOptionPane.showInputDialog(
                                                this, "Clave:")));
            }
            break;
            case "Transposicion de series": {
                textMensaje.setText(
                        maquinaCripto.desencriptadoTransposicionSeries(mensaje));
            }
            break;
            case "Transposicion de filas": {
                textMensaje.setText(
                        maquinaCripto.desencriptadoTransposicionFilas(
                                mensaje, JOptionPane.showInputDialog(
                                                this, "Clave:")));
            }
            break;
            case "Transposicion de columnas": {
                textMensaje.setText(
                        maquinaCripto.desencriptadoTransposicionColumnas(
                                mensaje, JOptionPane.showInputDialog(
                                                this, "Clave:")));
            }
            break;
            case "Transposicion en zig zag": {
                textMensaje.setText(
                        maquinaCripto.desencriptadoTransposicionZigZag(
                                mensaje, Integer.parseInt(
                                        JOptionPane.showInputDialog(
                                                this, "Clave:"))));
            }
            break;
            case "Sustitucion por decimacion pura": {
                textMensaje.setText(maquinaCripto.desencriptadoSustitucionDesplazamientoGenerico(mensaje, 
                                0,Integer.
                                        parseInt(JOptionPane.showInputDialog(
                                                this, "decimacion:")),""));
            }
            break;
            case "Sustitucion por decimacion Afin": {
                textMensaje.setText(maquinaCripto.desencriptadoSustitucionDesplazamientoGenerico(mensaje, 
                                Integer.parseInt(
                                        JOptionPane.showInputDialog(
                                                this, "desplazamiento:")),
                                Integer.parseInt(
                                        JOptionPane.showInputDialog(
                                                this, "decimacion:")),""));
            }
            break;
            case "Sustitucion polialfabetica": {
                 textMensaje.setText(maquinaCripto.
                         desencriptadoSustitucionPoliAlfabetica(
                                 mensaje));
            }
            break;
            case "Sustitucion de primer orden": {
                textMensaje.setText(maquinaCripto.
                         desencriptadoSustitucionHomofonosPrimerOrden(mensaje, 
                                 tHP));
            }
            break;
            case "Sustitucion de orden mayor": {
                boolean b = Boolean.parseBoolean(JOptionPane.showInputDialog(this,
                        "Desea usar las filas como guia para la clave "
                                + "correcta? (True/False)"));
                textMensaje.setText(maquinaCripto.
                         desencriptadoSustitucionHomofonosOrdenMayor(tHS, 
                                 mensaje, 
                                 b));
            }
            break;
            case "Polialfabeticos periodicos":{
                textMensaje.setText(maquinaCripto.desencriptadoSustitucionPolialfabeticosPeriodicos(mensaje,
                        JOptionPane.showInputDialog(this, "Clave:")));
            }
            break;
        }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, e);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JComboBox<String> seleccion;
    private javax.swing.JTextField textMensaje;
    // End of variables declaration//GEN-END:variables

    private String formatearMensaje(String mensaje) {
        mensaje = mensaje.replaceAll(" ", "");
        mensaje = mensaje.toLowerCase();
        return mensaje;
    }

    private void mostrarTabla2() {
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setColumnCount(tHS.length);
        model.setRowCount(tHS[0].length);
       
        for (int i = 0; i < tHS.length; i++) {
            for (int j = 0; j < tHS[0].length; j++) {
                model.setValueAt(tHS[i][j], j, i);
            }
        }
        
        for (int i = 0; i < model.getColumnCount(); i++) {
            jTable2.getColumnModel().getColumn(i).setHeaderValue(
            maquinaCripto.getAlfabeto().get(i));
        }
    }

    private void mostrarAlfabeto() {
        jTextArea1.setText("");
        jTextArea1.append("tamaño: " + maquinaCripto.getAlfabeto().size()
                + "\n");
        formatearTextArea(jTextArea1,
                maquinaCripto.getAlfabeto().toString(), 100);
    }

    private void generarTablas() {
        tHP = MaquinaCripto.generarHomofonos(3,
                maquinaCripto.getAlfabeto());
        tHS = MaquinaCripto.generarHomofonos(
                maquinaCripto.getAlfabeto().size(),
                maquinaCripto.getAlfabeto());
    }
    
    private void mostrarTabla1() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setColumnCount(tHP.length);
        model.setRowCount(tHP[0].length);
       
        for (int i = 0; i < tHP.length; i++) {
            for (int j = 0; j < tHP[0].length; j++) {
                model.setValueAt(tHP[i][j], j, i);
            }
        }
        
        for (int i = 0; i < model.getColumnCount(); i++) {
            jTable1.getColumnModel().getColumn(i).setHeaderValue(
            maquinaCripto.getAlfabeto().get(i));
        }
    }
    
    private void formatearTextArea(JTextArea jTextArea1, String string, int caracteres) {
        String subString;
        while(!string.isEmpty()){
            if(string.length() < caracteres){
                jTextArea1.append(string + "\n");
                return;
            }
            subString = string.substring(0, caracteres);
            string = string.substring(caracteres, string.length());
            jTextArea1.append(subString + "\n");
        }
    }

    private String cambiarMinusculasYQuitarEspacios(String mensaje) {
        mensaje = mensaje.replaceAll(" ", "");
        mensaje = mensaje.toLowerCase();
        return mensaje;
    }
}
